#!/bin/bash

# abbr list
# AC    -       Accept
# WA    -       Wrong Answer

# 0 represents judge point AC
# 1 represents there are problems in teachers' file
# 2 represents there are problems in syntax
# 4 represents AC

# it will be formatted into standard JSON afterwards.
# Full credit will be 100 for CG platform
ep=100
# That indicates there will be one and only one testpoint, without any directory with name: pointx
testPointNum=-1
# Get all directories with name point
pts=$(ls /coursegrader/testdata | grep 'point')
pts=${pts//point/}
ARR=($pts)
IFS=$'\n' sorted=($(sort -r -n <<<"${ARR[*]}"))
# There might be a slight gap if 100 % testPointNum != 0
if [[ "${sorted[0]}" != "" ]]; then
  let testPointNum=${sorted[0]}+1;
  let ep=100/$testPointNum
fi
testPass=0

# JSON
print() {
  if [ "$1" == "0" ]; then
    echo {\"HTML\":\"true\", \"verdict\":\"${2} AC\", \"score\":\"0\",\"comment\":\"Point ${2} correct\"}
  elif [ "$1" == "1" ]; then
    echo {\"verdict\":\"teacher error\", \"score\":\"0\", \"comment\":\"${2}\"}
  elif [ "$1" == "2" ]; then
      echo {\"verdict\":\"syntax error\", \"score\":\"0\", \"comment\":\"${2}\"}
  elif [ "$1" == "4" ]; then
    echo {\"HTML\":\"true\", \"verdict\":\"AC\", \"score\":\"100\", \"comment\":\"Answer Correct\"}
  elif [ "$1" == "5" ]; then
    realScore=$[$testPass * 100 / $testPointNum]
    comment="Partially Correct"
    if [[ "$realScore" == "100" ]]; then
	comment="AC"
    fi
    echo {\"HTML\":\"true\", \"verdict\":\"${2}\", \"score\":\"$realScore\", \"comment\":\"$comment\"}
  else
    echo {\"HTML\":\"true\", \"verdict\":\"${2} WA\", \"score\":\"0\", \"comment\":\"${3}\"}
  fi
}
# Delete cache
quit_oj() {
  make clean > /dev/null 2>&1
  rm -rf /home/ojfiles
  exit 0
}

if [ -d "/home/ojfiles" ]; then
  rm -rf /home/ojfiles
fi

mkdir /home/ojfiles

simulateTime=$1
finishTime=$2

if [[ $simulateTime == "" ]]; then
  simulateTime=1200
  finishTime=1200
fi

# There is a main test point
if [[ $3 == "M" ]]; then

# Compile teacher's answer:
make teacher_exe > /home/ojfiles/make_log.txt 2>&1
# output: /home/ojfiles/build/teacher_exe

# Something is wrong: make failed
if [ ! -s "/home/ojfiles/build/teacher_exe" ]; then
  errors=$(cat /home/ojfiles/make_log.txt | sed ':label;N;s/\n/\\\\n/;b label' 2>/dev/null)
  print 1 "$errors"
  quit_oj
#else 
#  cat /home/ojfiles/make_log.txt
fi

# run, if it costs longer than simulateTime, it will be killed.
timeout $simulateTime /home/ojfiles/build/teacher_exe >/home/ojfiles/teacher_result

# # if return status is not zero, which means something wrong occured.
if [ $? -ne 0 ]; then
  print 1 "SIMULATE ERROR, PLEASE CONTACT YOUR TA."
  quit_oj
fi

# Compile student's answer:
make student_exe > /home/ojfiles/make_log_student.txt 2>&1
# output: /home/ojfiles/build/student_exe

# Something is wrong: make failed
if [ ! -s "/home/ojfiles/build/student_exe" ]; then
  errors=$(cat /home/ojfiles/make_log_student.txt | sed ':label;N;s/\n/\\\\n/;b label' 2>/dev/null)
  print 1 "$errors"
  quit_oj
#else 
#  cat /home/ojfiles/make_log.txt
fi

timeout $simulateTime /home/ojfiles/build/student_exe >/home/ojfiles/student_result
if [ $? -ne 0 ]; then
  print 2 "SIMULATE ERROR."
  quit_oj
fi

diff /home/ojfiles/student_result /home/ojfiles/teacher_result >/home/ojfiles/result.diff

else
	# There is not a main test point
	echo NO > /home/ojfiles/result.diff
fi

if test -s /home/ojfiles/result.diff; then
  # testbench wrong and, no sub testbench.	
  if [[ "$testPointNum" == "-1" ]]; then
    print 3 "All" "All Wrong"
    quit_oj
  fi

  for ((i = 0; i < $testPointNum; i = i + 1)); do
    # Compile teacher's answer for point i:
    make teacher_exe TEST_POINT=$i > /home/ojfiles/make_log_teacher$i.txt 2>&1
    # output: /home/ojfiles/build/teacher_exe
    
    # Something is wrong: make failed
    if [ ! -s "/home/ojfiles/build/teacher_exe$i" ]; then
      errors=$(cat /home/ojfiles/make_log_teacher$i.txt | sed ':label;N;s/\n/\\\\n/;b label' 2>/dev/null)
      print 1 "$errors"
      quit_oj
 #   else 
 #     cat /home/ojfiles/make_log_teacher$i.txt
    fi
    
    # run, if it costs longer than simulateTime, it will be killed.
    timeout $simulateTime /home/ojfiles/build/teacher_exe$i >/home/ojfiles/teacher_result$i
    
    # # if return status is not zero, which means something wrong occured.
    if [ $? -ne 0 ]; then
      print 1 "SIMULATE $i ERROR, PLEASE CONTACT YOUR TA."
      quit_oj
    fi

    # Compile student's answer for point i:
    make student_exe TEST_POINT=$i > /home/ojfiles/make_log_student$i.txt 2>&1
    # output: /home/ojfiles/build/student_exe
    
    # Something is wrong: make failed
    if [ ! -s "/home/ojfiles/build/student_exe$i" ]; then
      errors=$(cat /home/ojfiles/make_log_student$i.txt | sed ':label;N;s/\n/\\\\n/;b label' 2>/dev/null)
      print 1 "$errors"
      quit_oj
  #  else 
  #    cat /home/ojfiles/make_log_student$i.txt
    fi

    timeout $simulateTime /home/ojfiles/build/student_exe$i >/home/ojfiles/student_result$i
    if [ $? -ne 0 ]; then
      print 2 "SIMULATE ERROR."
      quit_oj
    fi

    diff /home/ojfiles/student_result$i /home/ojfiles/teacher_result$i >/home/ojfiles/result.diff$i

    if test -s /home/ojfiles/result.diff$i; then
      print 3 $i "Point $i Wrong"
    else
      testPass=`expr $testPass + 1`
      print 0 $i
    fi

  done

  if [[ "$testPass" == "0" ]]; then
	print 3 -1 "PLEASE CHECK YOUR ANSWER!!!"
  else 
        print 5 "$testPass/$testPointNum POINT PASSED!!!"
  fi

else
  print 4
fi
